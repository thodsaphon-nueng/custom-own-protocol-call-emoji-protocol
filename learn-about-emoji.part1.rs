fn main() {
    let rocket = "üöÄ";
    let smile = "üòÄ";
    let family = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶";
    
    println!("=== ‡πÅ‡∏™‡∏î‡∏á Emoji ‡∏õ‡∏Å‡∏ï‡∏¥ ===");
    println!("Rocket: {}", rocket);
    println!("Smile: {}", smile);
    println!("Family: {}", family);
    
    println!("\n=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bytes ===");
    println!("Rocket bytes: {:?} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {} bytes)", rocket.as_bytes(), rocket.len());
    println!("Smile bytes: {:?} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {} bytes)", smile.as_bytes(), smile.len());
    println!("Family bytes: {:?} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {} bytes)", family.as_bytes(), family.len());
    
    // ‡πÅ‡∏™‡∏î‡∏á bytes ‡πÅ‡∏ö‡∏ö hex
    println!("\n=== Hex Representation ===");
    print_hex("Rocket", rocket);
    print_hex("Smile", smile);
    print_hex("Family", family);
    
    // ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≤‡∏î‡∏ä‡πà‡∏ß‡∏á (‡∏ó‡∏µ‡∏•‡∏∞ byte)
    println!("\n=== ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≤‡∏î‡∏ä‡πà‡∏ß‡∏á (‡∏ó‡∏µ‡∏•‡∏∞ byte) ===");
    print_partial("Rocket üöÄ", rocket);
    print_partial("Smile üòÄ", smile);
    print_partial("Family üë®‚Äçüë©‚Äçüëß‚Äçüë¶", family);
    
    // ‡∏ó‡∏î‡∏•‡∏≠‡∏á print ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô replacement character ÔøΩ)
    println!("\n=== Print bytes ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ===");
    let bytes = rocket.as_bytes();
    for i in 1..=bytes.len() {
        print!("‡πÉ‡∏ä‡πâ {} byte(s): ", i);
        // ‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô string (‡∏à‡∏∞‡πÑ‡∏î‡πâ ÔøΩ ‡∏ñ‡πâ‡∏≤ invalid UTF-8)
        match std::str::from_utf8(&bytes[0..i]) {
            Ok(s) => println!("'{}' ‚úì (valid UTF-8)", s),
            Err(_) => {
                // ‡πÉ‡∏ä‡πâ String::from_utf8_lossy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á ÔøΩ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà invalid bytes
                let s = String::from_utf8_lossy(&bytes[0..i]);
                println!("'{}' ‚úó (invalid UTF-8)", s);
            }
        }
    }
}

fn print_hex(name: &str, s: &str) {
    print!("{}: ", name);
    for byte in s.as_bytes() {
        print!("{:02X} ", byte);
    }
    println!();
}

fn print_partial(name: &str, s: &str) {
    println!("\n{}:", name);
    let bytes = s.as_bytes();
    
    for i in 1..=bytes.len() {
        let partial = &bytes[0..i];
        let display = String::from_utf8_lossy(partial);
        
        print!("  {} byte(s): ", i);
        for b in partial {
            print!("{:02X} ", b);
        }
        print!("‚Üí '{}'", display);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô valid UTF-8 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if std::str::from_utf8(partial).is_ok() {
            println!(" ‚úì");
        } else {
            println!(" ‚úó (incomplete/invalid)");
        }
    }
}